#ifndef IMAGE_H
#define IMAGE_H


class Image
{
    
public:
    Image();
    
    /**
    * @brief Seperate the image in 2 equal parts (left & right).
    * @param src the source matrix.
    * @param matL Left result.
    * @param matR Right result.
    */
    void separateImage(const cv::Mat &src, cv::Mat &mat_left, cv::Mat &mat_right);

    /**
     * @brief Apply a gaussian filter.
     * @param src the source matrix.
     * @param out the output matrix.
     */
    void computeGaussianBlur(const cv::Mat &src, cv::Mat &out);

    /**
     * @brief Apply a sobel filter.
     * @param src the source matrix.
     * @param out the output matrix.
     */
    void computeGradient(const cv::Mat &src, cv::Mat &out);

    /**
    * @brief Transform into greyscale if needed and apply the laplacian.
    * @param src the source matrix.
    * @param out the output matrix.
    */
    void computeLaplacian(const cv::Mat &src, cv::Mat &out);
private:
    cv::Mat &src
    
};

#endif // IMAGE_H